/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import Model.ThanhToan;
import Service.ThanhToanDAL;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author Admin
 */
public class ThanhToannJPane extends javax.swing.JPanel {
    private SimpleDateFormat timeFormat;
    private Map<String, Integer> dsSP = new HashMap<>();
    private double tongTienTT = 0;
    //private String spDaMua = "";
    private boolean themSL = false;
    public DefaultListModel<String> modelSPDaMua = new DefaultListModel<>();

    /**
     * Creates new form ThanhToannJPane
     */
    public ThanhToannJPane() {
        
        initComponents();
        listSPDaMua.setModel(modelSPDaMua);
        initClock();
        loadSanPhamList();
        listSPDaMua.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        btnThemSL.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                themSL = true;
            }
        });
    }
    public void initClock() {
        timeFormat = new SimpleDateFormat("yyyy-MM-dd");
        Timer timer = new Timer(86400000, e -> updateTime());
        timer.start();
        updateTime();
}
    public void updateTime(){
        String currentTime = timeFormat.format(new Date());
        txtThoiGianMua.setText(currentTime);
    }

    public void loadSanPhamList() {
        try {
            List<String> sanPhamList = ThanhToanDAL.getSanPhamList();

            if (sanPhamList == null || sanPhamList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Không có sản phẩm nào trong danh sách!");
                return;
            }
            modelSPDaMua.clear();
            for (String tenSP : sanPhamList) {
                if (!modelSPDaMua.contains(tenSP)) {
                    modelSPDaMua.addElement(tenSP);
                }
            }
//            listSPDaMua.setListData(sanPhamList.toArray(new String[0]));
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách sản phẩm!");
        }
    }
    
    
    public boolean checkSDT(String phone) {
        if (phone.length() != 10) {
            return false;
        }
        if (!phone.startsWith("0")) {
            return false;
        }
        for (char c : phone.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMaHD = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listSPDaMua = new javax.swing.JList<>();
        jLabel11 = new javax.swing.JLabel();
        txtSL = new javax.swing.JTextField();
        btnThemSL = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtThoiGianMua = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        rdoTienMat = new javax.swing.JRadioButton();
        rdoQRCode = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        txtTongTienThanhToan = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtTienDaNhan = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtTienThua = new javax.swing.JTextField();
        btnThanhToan = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        lblAnh = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMaNV = new javax.swing.JTextField();

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 153));
        jLabel4.setText("THÔNG TIN THANH TOÁN");

        jLabel2.setText("Mã hóa đơn");

        txtMaHD.setEditable(false);
        txtMaHD.setEnabled(false);

        jLabel6.setText("Số điện thoại");

        jLabel3.setText("Sản phẩm đã mua");

        listSPDaMua.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSPDaMuaValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listSPDaMua);

        jLabel11.setText("Số lượng");

        txtSL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSLActionPerformed(evt);
            }
        });

        btnThemSL.setText("Thêm");
        btnThemSL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemSLActionPerformed(evt);
            }
        });

        jLabel7.setText("Thời gian mua");

        txtThoiGianMua.setEnabled(false);

        jLabel1.setText("Phương thức thanh toán");

        buttonGroup1.add(rdoTienMat);
        rdoTienMat.setText("Tiền mặt");
        rdoTienMat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoTienMatActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdoQRCode);
        rdoQRCode.setText("QR Code");
        rdoQRCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoQRCodeActionPerformed(evt);
            }
        });

        jLabel8.setText("Tổng tiền thanh toán");

        txtTongTienThanhToan.setEnabled(false);
        txtTongTienThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTongTienThanhToanActionPerformed(evt);
            }
        });

        jLabel9.setText("Tiền đã nhận");

        txtTienDaNhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTienDaNhanActionPerformed(evt);
            }
        });
        txtTienDaNhan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTienDaNhanKeyReleased(evt);
            }
        });

        jLabel10.setText("Tiền thừa");

        txtTienThua.setEnabled(false);
        txtTienThua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTienThuaActionPerformed(evt);
            }
        });

        btnThanhToan.setText("Thanh toán");
        btnThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThanhToanActionPerformed(evt);
            }
        });

        btnMoi.setText("Mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });

        lblAnh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/giay.jpg"))); // NOI18N

        jLabel5.setText("Mã nhân viên đứng quầy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(280, 280, 280)
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(jLabel11)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMaHD)
                            .addComponent(txtSDT)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnThemSL, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtThoiGianMua)
                            .addComponent(txtTongTienThanhToan)
                            .addComponent(txtTienDaNhan)
                            .addComponent(txtTienThua)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rdoTienMat)
                                .addGap(18, 18, 18)
                                .addComponent(rdoQRCode)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnThanhToan)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                                .addComponent(btnMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(117, 117, 117)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5)
                            .addComponent(txtMaNV)
                            .addComponent(lblAnh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(141, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnThemSL)
                                    .addComponent(jLabel11))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtThoiGianMua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdoTienMat)
                            .addComponent(rdoQRCode)
                            .addComponent(jLabel1)))
                    .addComponent(lblAnh, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTongTienThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTienDaNhan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTienThua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThanhToan)
                    .addComponent(btnMoi))
                .addContainerGap(58, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThanhToanActionPerformed
        // TODO add your handling code here
        try {
            String sdt = txtSDT.getText().trim();
            if (sdt.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Số điện thoại không được để trống!");
                return;
            }
            if (!checkSDT(sdt)) {
                JOptionPane.showMessageDialog(this, "Số điện thoại phải là số nguyên! Phải bắt đầu bằng số 0 và có đúng 10 chữ số.");
                return;
            }
            if (!ThanhToanDAL.checkSDT(sdt)) {
                JOptionPane.showMessageDialog(this, "Số điện thoại khách hàng không tồn tại!");
                return;
            }
            int maKH = ThanhToanDAL.getsdtKH(sdt);
            if (maKH == 0) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng với số điện thoại " + sdt);
                return;
            }
//            if (!ThanhToanDAL.checkMaKH(sdt)) {
//                JOptionPane.showMessageDialog(this, "Mã khách hàng không tồn tại!");
//                return;
//            }
//            String tenSP = listSPDaMua.getSelectedValue();
//            if (tenSP == null || tenSP.trim().isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Vui lòng chọn Sản phẩm đã mua!");
//                return;
//            }

            List<String> selectedSPs = listSPDaMua.getSelectedValuesList();
            if (selectedSPs.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một sản phẩm!");
                return;
            }
            
            for (String sp : selectedSPs) {
                if (!dsSP.containsKey(sp)) {
                    JOptionPane.showMessageDialog(this, "Vui lòng nhập số lượng cho sản phẩm '" + sp + "' và bấm nút Thêm!");
                    return;
                }
            }
            
//            String soLuongtxt = txtSL.getText().trim();
//            if (soLuongtxt.isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Vui lòng nhập Số lượng sản phẩm đã mua!");
//                return;
//            }
//            int soLuong = 0;
//            for (String sp : selectedSPs) {
//                soLuong = soLuong + dsSP.get(sp);
//            }
//            try {
//                soLuong = Integer.parseInt(soLuongtxt);
//                if (soLuong <= 0) {
//                    JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
//                    return;
//                }
//            } catch (NumberFormatException num) {
//                JOptionPane.showMessageDialog(this, "Số lượng sản phẩm phải là số nguyên dương!");
//                return;
//            }
            
//            if (!themSL) {
//                JOptionPane.showMessageDialog(this, "Bấm nút thêm để thêm số lượng sản phẩm");
//                return;
//            }
            
            if (!rdoQRCode.isSelected() && !rdoTienMat.isSelected()) {
                JOptionPane.showMessageDialog(this, "Phương thức thanh toán không được để trống!");
                return;
            }
            
            String tienDaNhanStr = txtTienDaNhan.getText().trim();
            if (tienDaNhanStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Tiền đã nhận không được để trống!");
                return;
            }
            double tongTien, tienDaNhan;
            try {
                tongTien = Double.parseDouble(txtTongTienThanhToan.getText());
                tienDaNhan = Double.parseDouble(tienDaNhanStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Tiền đã nhận phải nhập số nguyên dương!");
                return;
            }
            if (tienDaNhan <= 0) {
                JOptionPane.showMessageDialog(this, "Tiền nhận phải lớn hơn 0!");
                return;
            }
            if (tienDaNhan < tongTien) {
                JOptionPane.showMessageDialog(this, "Tiền nhận phải lớn hơn hoặc bằng tổng tiền!");
                return;
            }
            
            String maNV = txtMaNV.getText().trim();
            if (maNV.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Mã nhân viên đứng quầy không được để trống!");
                return;
            }
            if (!maNV.matches("^NV\\d{2,}$")) {
                JOptionPane.showMessageDialog(this, "Mã nhân viên yêu cầu 2 chữ đầu phải là NV!");
                return;
            }
            if (!ThanhToanDAL.checkMaNV(maNV)) {
                JOptionPane.showMessageDialog(this, "Mã nhân viên không tồn tại");
                return;
            }
            
            //String danhSachSP = String.join(", ", selectedSPs);
//            StringBuilder sbSPDaMua = new StringBuilder();
//            int tongSL = 0;
//            for (Map.Entry<String, Integer> entry : dsSP.entrySet()) {
//                int soLuongSP = entry.getValue();
//                tongSL = tongSL + soLuongSP;
//                sbSPDaMua.append(soLuongSP).append(" ").append(entry.getKey()).append(", ");
//            }
//            String spDaMua = sbSPDaMua.toString();
//            if (spDaMua.endsWith(", ")) {
//                spDaMua = spDaMua.substring(0, spDaMua.length() - 2);
//            }
            if (dsSP.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất 1 sản phẩm");
                return;
            }
            String tenSP = "";
            int soLuong = 0;
            for (Map.Entry<String, Integer> entry : dsSP.entrySet()) {
                tenSP = entry.getKey();
                soLuong = entry.getValue();
            }
            
            
            //StringBuilder sbMaSP = new StringBuilder();
//            for (String sp : dsSP.keySet()) {
//                try {
//                    String maSP = ThanhToanDAL.getMaSP(sp);
//                    if (maSP != null && !maSP.isEmpty()) {
//                        sbMaSP.append(maSP).append(", ");
//                    }
//                } catch (SQLException | ClassNotFoundException e) {
//                    e.printStackTrace();
//                }
//            }
//            String dsMaSP = sbMaSP.toString();
//            if (dsMaSP.endsWith(", ")) {
//                dsMaSP = dsMaSP.substring(0, dsMaSP.length() - 2);
//            }
              String maSP = ThanhToanDAL.getMaSP(tenSP);
            
//            String danhSachMaSP = selectedSPs.stream()
//                    .map(sp -> {
//                        try {
//                            return ThanhToanDAL.getMaSP(sp);
//                        } catch (SQLException | ClassNotFoundException e) {
//                            e.printStackTrace();
//                            return "";
//                        }
//                    })
//                    .filter(maSP -> !maSP.isEmpty())
//                    .reduce((a, b) -> a + ", " + b)
//                    .orElse("");
            
            ThanhToan tt = new ThanhToan(
                    0, 
                    maKH, 
                    sdt, 
                    maSP, 
                    tenSP, 
                    soLuong,
                    new SimpleDateFormat("yyyy-MM-dd").format(new Date()),
                    rdoQRCode.isSelected() ? "QR Code" : "Tiền mặt",
                    tongTien, 
                    tienDaNhan, 
                    tienDaNhan - tongTien, 
                    maNV
            );
            
            if (ThanhToanDAL.insert(tt)) {
                JOptionPane.showMessageDialog(this, "Thanh toán thành công!");
//                tongTienTT = 0;
//                spDaMua = "";
                if (HoaDonnJPane.instance != null) {
                    HoaDonnJPane.instance.loadData();
                }
                clearForm();
            } else {
                JOptionPane.showMessageDialog(this, "Lỗi khi thanh toán!");
            }
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi kết nối database: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnThanhToanActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        txtSDT.setText("");
        //txtMaNV.setText("");
        txtTongTienThanhToan.setText("");
        txtTienDaNhan.setText("");
        txtTienThua.setText("");
        listSPDaMua.clearSelection();
        rdoQRCode.setSelected(false);
        rdoTienMat.setSelected(false);
        buttonGroup1.clearSelection();
        txtSL.setText("");
        themSL = false;
        dsSP.clear();
        tongTienTT = 0;
    }//GEN-LAST:event_btnMoiActionPerformed

    private void txtTongTienThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTongTienThanhToanActionPerformed
        // TODO add your handling code here:
        tinhTongTien();
    }//GEN-LAST:event_txtTongTienThanhToanActionPerformed

    private void txtTienDaNhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTienDaNhanActionPerformed
        // TODO add your handling code here:
        tinhTienThua();
    }//GEN-LAST:event_txtTienDaNhanActionPerformed

    private void txtTienThuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTienThuaActionPerformed
        // TODO add your handling code here:
        tinhTienThua();
    }//GEN-LAST:event_txtTienThuaActionPerformed

    private void listSPDaMuaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSPDaMuaValueChanged
        // TODO add your handling code here:
        if (!evt.getValueIsAdjusting()) {
            tinhTongTien();
        }
    }//GEN-LAST:event_listSPDaMuaValueChanged

    private void rdoTienMatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoTienMatActionPerformed
        // TODO add your handling code here:
        lblAnh.setIcon(new ImageIcon(getClass().getResource("/img/giay.jpg")));
    }//GEN-LAST:event_rdoTienMatActionPerformed

    private void rdoQRCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoQRCodeActionPerformed
        // TODO add your handling code here:
        lblAnh.setIcon(new ImageIcon(getClass().getResource("/img/qrcode.jpg")));
    }//GEN-LAST:event_rdoQRCodeActionPerformed

    private void txtTienDaNhanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTienDaNhanKeyReleased
        // TODO add your handling code here:
        tinhTienThua();
    }//GEN-LAST:event_txtTienDaNhanKeyReleased

    private void btnThemSLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemSLActionPerformed
        // TODO add your handling code here:
        String spDaMua = listSPDaMua.getSelectedValue();
        if (spDaMua == null || spDaMua.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm đã mua!");
            return;
        }
        if (dsSP.containsKey(spDaMua)) {
            JOptionPane.showMessageDialog(this, "Sản phẩm '" + spDaMua + "' đã được thêm số lượng!");
            return;
        }
        if (!dsSP.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bạn chỉ được thêm 1 sản phẩm!");
            return;
        }
        
        String soLuongtxt = txtSL.getText().trim();
        if (soLuongtxt.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Số lượng đã mua không được để trống!");
            return;
        }
        int soLuong = 0;
        try {
            soLuong = Integer.parseInt(soLuongtxt);
            if (soLuong <= 0) {
                JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
                return;
            }
        } catch (NumberFormatException num) {
            JOptionPane.showMessageDialog(this, "Số lượng sản phẩm phải nhập số nguyên dương!");
            return;
        }

        double donGia;
        try {
            donGia = ThanhToanDAL.getGiaSanPham(spDaMua);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi lấy giá sản phẩm!");
            return;
        }
        
//        if (dsSP.containsKey(spDaMua)) {
//            int soLuongHienTai = dsSP.get(spDaMua);
//            dsSP.put(spDaMua, soLuongHienTai + soLuongMoi);
//        } else {
//            dsSP.put(spDaMua, soLuongMoi);
//        }

        dsSP.put(spDaMua, soLuong);
        
        //double tienThem = soLuongMoi * donGia;
        tongTienTT = soLuong * donGia;
        txtTongTienThanhToan.setText(String.valueOf(tongTienTT));
        
//        StringBuilder sb = new StringBuilder();
//        for (Map.Entry<String, Integer> entry : dsSP.entrySet()) {
//            sb.append(entry.getValue()).append(" ").append(entry.getKey()).append(", ");
//        }
//        String spDaMuaCuoi = sb.toString();
//        if (spDaMuaCuoi.endsWith(", ")) {
//            spDaMuaCuoi = spDaMuaCuoi.substring(0, spDaMua.length() - 2);
//        }
        
//        String cuPhapSP = soLuong + " " + spDaMua;
//        if (spDaMua.isEmpty()) {
//            spDaMua = cuPhapSP;
//        } else {
//            spDaMua = spDaMua + ", " + cuPhapSP;
//        }
        
        JOptionPane.showMessageDialog(this, "Đã thêm: " + soLuong + " " + spDaMua /*+ "\nDanh sách SP đã mua: " + spDaMuaCuoi*/);
        
        txtSL.setText("");
    }//GEN-LAST:event_btnThemSLActionPerformed

    private void txtSLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSLActionPerformed

    private void clearForm() {
        txtSDT.setText("");
        txtMaNV.setText("");
        txtTongTienThanhToan.setText("");
        txtTienDaNhan.setText("");
        txtTienThua.setText("");
        listSPDaMua.clearSelection();
        rdoQRCode.setSelected(false);
        rdoTienMat.setSelected(false);
        txtSL.setText("");
        buttonGroup1.clearSelection();
    }

    private void tinhTongTien() {
        double total = 0;
        for (String selectedSP : listSPDaMua.getSelectedValuesList()) {
            try {
                total += ThanhToanDAL.getGiaSanPham(selectedSP);
            } catch (SQLException | ClassNotFoundException ex) {
                ex.printStackTrace();
            }
        }
        txtTongTienThanhToan.setText(String.valueOf(total));
    }

    private void tinhTienThua() {
        try {
            double tongTien = Double.parseDouble(txtTongTienThanhToan.getText());
            double tienDaNhan = Double.parseDouble(txtTienDaNhan.getText());
            double tienThua = tienDaNhan - tongTien;
            txtTienThua.setText(String.valueOf(tienThua));
        } catch (NumberFormatException e) {
            txtTienThua.setText("0");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnThanhToan;
    private javax.swing.JButton btnThemSL;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAnh;
    private javax.swing.JList<String> listSPDaMua;
    private javax.swing.JRadioButton rdoQRCode;
    private javax.swing.JRadioButton rdoTienMat;
    private javax.swing.JTextField txtMaHD;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtSL;
    private javax.swing.JTextField txtThoiGianMua;
    private javax.swing.JTextField txtTienDaNhan;
    private javax.swing.JTextField txtTienThua;
    private javax.swing.JTextField txtTongTienThanhToan;
    // End of variables declaration//GEN-END:variables
}
