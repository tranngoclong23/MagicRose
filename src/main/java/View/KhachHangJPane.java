/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import Model.KhachHang;
import Service.KhachHangDAL;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class KhachHangJPane extends javax.swing.JPanel {

    DefaultTableModel tableModel;

    /**
     * Creates new form KhachHangJPane
     */
    public KhachHangJPane() {
        initComponents();
        initTable();
        fillToTable();
    }

    public void initTable() {
        tableModel = new DefaultTableModel();
        String[] cols = new String[]{"Mã KH", "Tên KH", "Giới tính", "SĐT", "Email", "Địa chỉ"};
        tableModel.setColumnIdentifiers(cols);
        tblKH.setModel(tableModel);
    }

    public void fillToTable() {
        try {
            List<KhachHang> list = KhachHangDAL.findAll();
            tableModel.setNumRows(0);
            for (KhachHang khachHang : list) {
                tableModel.addRow(new Object[]{khachHang.getMa(), khachHang.getTen(),
                    khachHang.getGioitinh(), khachHang.getSdt(), khachHang.getEmail(),
                    khachHang.getDiachi()});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public boolean checkSDT(String phone) {
        if (phone.length() != 10) {
            return false;
        }
        if (!phone.startsWith("0")) {
            return false;
        }
        for (char c : phone.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    public boolean checkEM(String email) {
        if (!email.contains("@")) {
            return false;
        } 
        if (!email.endsWith("@gmail.com")) {
            return false;
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txtTK = new javax.swing.JTextField();
        btnTK = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtMa = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtEM = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtTen = new javax.swing.JTextField();
        txtSDT = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKH = new javax.swing.JTable();
        rdoNam = new javax.swing.JRadioButton();
        rdoNu = new javax.swing.JRadioButton();
        jLabel19 = new javax.swing.JLabel();
        cboTK = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Tìm kiếm");

        txtTK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTKActionPerformed(evt);
            }
        });

        btnTK.setText("Tìm");
        btnTK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTKActionPerformed(evt);
            }
        });

        jLabel2.setText("Mã khách hàng");

        txtMa.setEnabled(false);

        jLabel3.setText("Giới tính");

        jLabel4.setText("Email");

        jLabel5.setText("Tên khách hàng");

        jLabel6.setText("Số điện thoại");

        jLabel7.setText("Địa chỉ");

        txtDiaChi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiaChiActionPerformed(evt);
            }
        });

        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnMoi.setText("Mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });

        tblKH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã khách hàng", "Tên khách hàng", "Giới tính", "Số điện thoại", "Email", "Địa chỉ"
            }
        ));
        tblKH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKHMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblKH);

        buttonGroup1.add(rdoNam);
        rdoNam.setText("Nam");

        buttonGroup1.add(rdoNu);
        rdoNu.setText("Nữ");

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 0, 153));
        jLabel19.setText("QUẢN LÝ KHÁCH HÀNG");

        cboTK.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên KH", "SĐT", "Email" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(jLabel19))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtTK, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cboTK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnTK))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(rdoNam)
                                                .addGap(18, 18, 18)
                                                .addComponent(rdoNu))
                                            .addComponent(txtMa, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                                            .addComponent(txtEM))
                                        .addGap(87, 87, 87)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtDiaChi, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                            .addComponent(txtSDT)
                                            .addComponent(txtTen)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnThem)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(174, 174, 174)
                                        .addComponent(btnMoi, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(95, 95, 95)))))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel19)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTK)
                    .addComponent(cboTK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtMa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdoNam)
                    .addComponent(rdoNu))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtEM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem)
                    .addComponent(btnMoi)
                    .addComponent(btnSua))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtTKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTKActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTKActionPerformed

    private void txtDiaChiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiaChiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiaChiActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
//        if (txtMa.getText().trim().isEmpty()) {
//            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã khách hàng!");
//            return;
//        }
        if (txtTen.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên khách hàng không được để trống!");
            return;
        }
        if (!rdoNam.isSelected() && !rdoNu.isSelected()) {
            JOptionPane.showMessageDialog(this, "Giới tính không được để trống!");
            return;
        }
        if (txtSDT.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không được để trống!");
            return;
        }
        if (!checkSDT(txtSDT.getText().trim())) {
            JOptionPane.showMessageDialog(this, "Số điện thoại phải là số nguyên! Phải bắt đầu bằng số 0 và có đúng 10 chữ số.");
            return;
        }
        if (txtEM.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Email không được để trống!");
            return;
        }
        if (!checkEM(txtEM.getText().trim())) {
            JOptionPane.showMessageDialog(this, "Email không hợp lệ! Vui lòng nhập đúng định dạng\nVí dụ: example@gmail.com");
            return;
        }
        if (txtDiaChi.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Địa chỉ không được để trống!");
            return;
        }
        int chon = JOptionPane.showConfirmDialog(this, "Bạn chắc chắn muốn lưu thông tin sản phẩm này không?");
        if (chon == JOptionPane.YES_OPTION) {
            try {
                KhachHang kh = new KhachHang();
                kh.setTen(txtTen.getText());
                if (rdoNam.isSelected()) {
                    kh.setGioitinh("Nam");
                } else {
                    kh.setGioitinh("Nữ");
                }
                kh.setSdt(txtSDT.getText());
                kh.setEmail(txtEM.getText());
                kh.setDiachi(txtDiaChi.getText());
                KhachHangDAL.insert(kh);
                JOptionPane.showMessageDialog(this, "Lưu thông tin khách hàng thành công!");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lưu thông tin khách hàng thất bại!");
            }
        }
        fillToTable();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        if (txtMa.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dữ liệu muốn sửa có trong bảng!");
            return;
        }
        if (txtTen.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên khách hàng không được để trống!");
            return;
        }
        if (!rdoNam.isSelected() && !rdoNu.isSelected()) {
            JOptionPane.showMessageDialog(this, "Giới tính không được để trống!");
            return;
        }
        if (txtSDT.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không được để trống!");
            return;
        }
        if (!checkSDT(txtSDT.getText().trim())) {
            JOptionPane.showMessageDialog(this, "Số điện thoại phải là số nguyên! Phải bắt đầu bằng số 0 và có đúng 10 chữ số.");
            return;
        }
        if (txtEM.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Email không được để trống!");
            return;
        }
        if (!checkEM(txtEM.getText().trim())) {
            JOptionPane.showMessageDialog(this, "Email không hợp lệ! Vui lòng nhập lại!\nVD: abc@gmail.com");
            return;
        }
        if (txtDiaChi.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Địa chỉ không được để trống!");
            return;
        }
        int chon = JOptionPane.showConfirmDialog(this, "Bạn chắc chắn muốn cập nhật thông tin khách hàng này không?" /*+ txtMa.getText() + " này không?"*/);
        if (chon == JOptionPane.YES_OPTION) {
            try {
                KhachHang kh = new KhachHang();
                kh.setMa(Integer.parseInt(txtMa.getText()));
                kh.setTen(txtTen.getText());
                if (rdoNam.isSelected()) {
                    kh.setGioitinh("Nam");
                } else {
                    kh.setGioitinh("Nữ");
                }
                kh.setSdt(txtSDT.getText());
                kh.setEmail(txtEM.getText());
                kh.setDiachi(txtDiaChi.getText());
                KhachHangDAL.update(kh);
                JOptionPane.showMessageDialog(this, "Cập nhật thông tin khách hàng thành công!");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Cập nhật thông tin khách hàng thất bại!");
            }
        }
        fillToTable();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        txtMa.setText("");
        txtTen.setText("");
        buttonGroup1.clearSelection();
        txtSDT.setText("");
        txtEM.setText("");
        txtDiaChi.setText("");
        txtTK.setText("");
        fillToTable();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void tblKHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKHMouseClicked
        // TODO add your handling code here:
        int index = tblKH.getSelectedRow();
        if (index >= 0) {
            int ma = (int) tblKH.getValueAt(index, 0);
            KhachHang kh = KhachHangDAL.findByID(ma);
            txtMa.setText(String.valueOf(kh.getMa()));
            txtTen.setText(kh.getTen());
            if (kh.getGioitinh().equals("Nam")) {
                rdoNam.setSelected(true);
            } else {
                rdoNu.setSelected(true);
            }
            txtSDT.setText(kh.getSdt());
            txtEM.setText(kh.getEmail());
            txtDiaChi.setText(kh.getDiachi());
        }
    }//GEN-LAST:event_tblKHMouseClicked

    private void btnTKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTKActionPerformed
        // TODO add your handling code here:
        if (cboTK.getSelectedItem().equals("Tên KH")) {
            tableModel.setRowCount(0);
            try {
                if (txtTK.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Vui lòng nhập tên khách hàng cần tìm kiếm!");
                    return;
                }
                List<KhachHang> listTen = KhachHangDAL.findByName(txtTK.getText().trim());
                if (listTen.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy tên khách hàng! Vui lòng nhập lại!");
                    return;
                }
                for (KhachHang khachHang : listTen) {
                    tableModel.addRow(new Object[]{khachHang.getMa(), khachHang.getTen(),
                        khachHang.getGioitinh(), khachHang.getSdt(), khachHang.getEmail(),
                        khachHang.getDiachi()});
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (cboTK.getSelectedItem().equals("SĐT")) {
            tableModel.setRowCount(0);
            try {
                if (txtTK.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Vui lòng nhập số điện thoại khách hàng cần tìm kiếm!");
                    return;
                }
                if (!checkSDT(txtTK.getText().trim())) {
                    JOptionPane.showMessageDialog(this, "Số điện thoại phải là số nguyên! Phải bắt đầu bằng số 0 và có đúng 10 chữ số.");
                    return;
                }
                List<KhachHang> listTen = KhachHangDAL.findBySDT(txtTK.getText().trim());
                if (listTen.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy số điện thoại khách hàng! Vui lòng nhập lại!");
                    return;
                }
                for (KhachHang khachHang : listTen) {
                    tableModel.addRow(new Object[]{khachHang.getMa(), khachHang.getTen(),
                        khachHang.getGioitinh(), khachHang.getSdt(), khachHang.getEmail(),
                        khachHang.getDiachi()});
                }
                JOptionPane.showMessageDialog(this, "Tìm kiếm thành công!");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Tìm kiếm thất bại!");
            }
        }
        if (cboTK.getSelectedItem().equals("Email")) {
            tableModel.setRowCount(0);
            try {
                if (txtTK.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Vui lòng nhập email khách hàng cần tìm kiếm!");
                    return;
                }
                if (!checkEM(txtTK.getText().trim())) {
                    JOptionPane.showMessageDialog(this, "Email không hợp lệ! Vui lòng nhập lại!\nVD: abc@gmail.com");
                    return;
                }
                List<KhachHang> listTen = KhachHangDAL.findByEmail(txtTK.getText().trim());
                if (listTen.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy email khách hàng! Vui lòng nhập lại!");
                    return;
                }
                for (KhachHang khachHang : listTen) {
                    tableModel.addRow(new Object[]{khachHang.getMa(), khachHang.getTen(),
                        khachHang.getGioitinh(), khachHang.getSdt(), khachHang.getEmail(),
                        khachHang.getDiachi()});
                }
                JOptionPane.showMessageDialog(this, "Tìm kiếm thành công!");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Tìm kiếm thất bại!");
            }
        }
    }//GEN-LAST:event_btnTKActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnTK;
    private javax.swing.JButton btnThem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cboTK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rdoNam;
    private javax.swing.JRadioButton rdoNu;
    private javax.swing.JTable tblKH;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtEM;
    private javax.swing.JTextField txtMa;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtTK;
    private javax.swing.JTextField txtTen;
    // End of variables declaration//GEN-END:variables
}
